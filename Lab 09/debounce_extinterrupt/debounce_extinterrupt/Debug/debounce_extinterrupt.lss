
debounce_extinterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000711  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  000009b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000359  00000000  00000000  00000ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  000017a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 56 00 	call	0xac	; 0xac <main>
  74:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_timer0>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  7c:	f8 94       	cli
 * - Initializing 8-bit timer0 (used for polling input)
 */
void
init_timer0(void)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	09 c0       	rjmp	.+18     	; 0x94 <init_timer0+0x18>
		TCCR0 |= (1 << CS02);				//Prescaler: f_clk/256 => 1MHz/256 => T_timer0 ~= 0.25 ms
  82:	83 b7       	in	r24, 0x33	; 51
  84:	84 60       	ori	r24, 0x04	; 4
  86:	83 bf       	out	0x33, r24	; 51
		TIMSK |= (1 << TOIE0);				//Enable overflow interrupt
  88:	89 b7       	in	r24, 0x39	; 57
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	89 bf       	out	0x39, r24	; 57
		TCNT0 = 254;						//2 * ~.25ms period => switch sample every .5ms 
  8e:	8e ef       	ldi	r24, 0xFE	; 254
  90:	82 bf       	out	0x32, r24	; 50
 * - Initializing 8-bit timer0 (used for polling input)
 */
void
init_timer0(void)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	81 11       	cpse	r24, r1
  96:	f5 cf       	rjmp	.-22     	; 0x82 <init_timer0+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
  98:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
  9a:	08 95       	ret

0000009c <init_io>:
}

void
init_io(void)
{
	DDRA |= (1 << PINA2);					//PIN A 2 is an output
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PINA0) | (1 << PINA1);	//Pull-up resistors are high for PA0 and PA1 inputs (A and A')
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;							//DDRD is input
  a8:	11 ba       	out	0x11, r1	; 17
  aa:	08 95       	ret

000000ac <main>:
}

int
main(void)
{
	init_timer0();
  ac:	0e 94 3e 00 	call	0x7c	; 0x7c <init_timer0>
	init_io();
  b0:	0e 94 4e 00 	call	0x9c	; 0x9c <init_io>
	GICR |= (1 << INT0);	//Enable external interrupt on INT0 pin
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC00);	//Trigger the interrupt on any logical change of the INT0 pin signal
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	85 bf       	out	0x35, r24	; 53
	sei();					//Initialize all necessary values
  c0:	78 94       	sei
	
	samples = 0;				//Assuming the toggle switch is stable at the time
  c2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <samples>
	true_edge_detected = FALSE;	//of device boot
  c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	edge_detected = FALSE;
  ca:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <edge_detected>
	
	for (;;) {
		if (true_edge_detected) {			//If an edge has been successfully detected
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	88 23       	and	r24, r24
  d4:	e1 f3       	breq	.-8      	; 0xce <main+0x22>
			if (bit_is_set(PIND, PD2)) {	//and the switch state is considered stable
  d6:	82 9b       	sbis	0x10, 2	; 16
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <main+0x36>
				PORTA |= (1 << PA2);		//then we can output that switch state
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <main+0x3c>
			} else {
				PORTA &=~ (1 << PA2);
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	8b bb       	out	0x1b, r24	; 27
			}
			true_edge_detected = FALSE;
  e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	f0 cf       	rjmp	.-32     	; 0xce <main+0x22>

000000ee <__vector_1>:
 * 
 * Raises a flag every time there's any logical change 
 * to the input signal.
 */
ISR(INT0_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
	edge_detected = TRUE;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <edge_detected>
}
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_9>:
 * then the input is considered stabilised
 * and the true_edge_detected flag is raised.
 *
 */
ISR(TIMER0_OVF_vect)
{	
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	if (edge_detected) {
 12e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <edge_detected>
 132:	88 23       	and	r24, r24
 134:	29 f0       	breq	.+10     	; 0x140 <__vector_9+0x34>
		samples = 0;		//new switch state is the same as the previous one
 136:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <samples>
		edge_detected = FALSE;
 13a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <edge_detected>
 13e:	05 c0       	rjmp	.+10     	; 0x14a <__vector_9+0x3e>
	} else {
		samples++;
 140:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <samples>
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <samples>
	}
	
	if (samples == MAX_SAMPLES) {
 14a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <samples>
 14e:	8a 30       	cpi	r24, 0x0A	; 10
 150:	19 f4       	brne	.+6      	; 0x158 <__vector_9+0x4c>
		true_edge_detected = TRUE;		//If we have 2 ms of stability, we have successfully detected
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}								
	
	init_timer0();
 158:	0e 94 3e 00 	call	0x7c	; 0x7c <init_timer0>
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
