
debounce_polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000715  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  0000099d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000342  00000000  00000000  00000fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000388  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  74:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_timer0>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  7c:	f8 94       	cli
 * - Initializing 8-bit timer0 (used for polling input)
 */
void
init_timer0(void)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	09 c0       	rjmp	.+18     	; 0x94 <init_timer0+0x18>
		TCCR0 |= (1 << CS02);				//Prescaler: f_clk/256 => 1MHz/256 => T_timer0 ~= 0.25 ms
  82:	83 b7       	in	r24, 0x33	; 51
  84:	84 60       	ori	r24, 0x04	; 4
  86:	83 bf       	out	0x33, r24	; 51
		TIMSK |= (1 << TOIE0);				//Enable overflow interrupt
  88:	89 b7       	in	r24, 0x39	; 57
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	89 bf       	out	0x39, r24	; 57
		TCNT0 = 254;						//2 * ~.25ms period => switch sample every .5ms 
  8e:	8e ef       	ldi	r24, 0xFE	; 254
  90:	82 bf       	out	0x32, r24	; 50
 * - Initializing 8-bit timer0 (used for polling input)
 */
void
init_timer0(void)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	81 11       	cpse	r24, r1
  96:	f5 cf       	rjmp	.-22     	; 0x82 <init_timer0+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
  98:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
  9a:	08 95       	ret

0000009c <init_io>:
}

void
init_io(void)
{
	DDRA |= (1 << PINA2);					//PIN A 2 is an output
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PINA0) | (1 << PINA1);	//Pull-up resistors are high for PA0 and PA1 inputs (A and A')
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	08 95       	ret

000000aa <get_switch_state>:
 * returns: HIGH or LOW
 */
unsigned char 
get_switch_state(void)
{
	if (bit_is_set(PINA, PA0)) {
  aa:	99 b3       	in	r25, 0x19	; 25
  ac:	89 2f       	mov	r24, r25
  ae:	81 70       	andi	r24, 0x01	; 1
  b0:	90 fd       	sbrc	r25, 0
		return HIGH;			
  b2:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return LOW;				
	}
}
  b4:	08 95       	ret

000000b6 <main>:

int
main(void)
{
	init_timer0();
  b6:	0e 94 3e 00 	call	0x7c	; 0x7c <init_timer0>
	init_io();
  ba:	0e 94 4e 00 	call	0x9c	; 0x9c <init_io>
	sei();					//Initialize all necessary values
  be:	78 94       	sei
	
	samples = 0;			//Assuming the toggle switch is stable at the time
  c0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <samples>
	edge_detected = FALSE;	//of device boot
  c4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <edge_detected>
	
	for (;;) {
		if (edge_detected) {				//If an edge has been successfully detected
  c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <edge_detected>
  cc:	88 23       	and	r24, r24
  ce:	e1 f3       	breq	.-8      	; 0xc8 <main+0x12>
			if (bit_is_set(PINA, PA0)) {	//and the switch state is considered stable
  d0:	c8 9b       	sbis	0x19, 0	; 25
  d2:	04 c0       	rjmp	.+8      	; 0xdc <main+0x26>
				PORTA |= (1 << PA2);		//then we can output that switch state
  d4:	8b b3       	in	r24, 0x1b	; 27
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	03 c0       	rjmp	.+6      	; 0xe2 <main+0x2c>
			} else {
				PORTA &=~ (1 << PA2);
  dc:	8b b3       	in	r24, 0x1b	; 27
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	8b bb       	out	0x1b, r24	; 27
			}
			edge_detected = FALSE;
  e2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <edge_detected>
  e6:	f0 cf       	rjmp	.-32     	; 0xc8 <main+0x12>

000000e8 <__vector_9>:
 * MAX_SAMPLES in a row, then the input is considered stabilised
 * and the edge_detected flag is raised.
 *
 */
ISR(TIMER0_OVF_vect)
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	if (switch_state == get_switch_state()) {
 10a:	0e 94 55 00 	call	0xaa	; 0xaa <get_switch_state>
 10e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 112:	89 13       	cpse	r24, r25
 114:	06 c0       	rjmp	.+12     	; 0x122 <__vector_9+0x3a>
		samples++;		//new switch state is the same as the previous one
 116:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <samples>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <samples>
 120:	02 c0       	rjmp	.+4      	; 0x126 <__vector_9+0x3e>
	} else {	
		samples = 0;	//if it's different, we reset the number of stable samples we have
 122:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <samples>
	}
	
	switch_state = get_switch_state();
 126:	0e 94 55 00 	call	0xaa	; 0xaa <get_switch_state>
 12a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
	if (samples == MAX_SAMPLES) {
 12e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <samples>
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	19 f4       	brne	.+6      	; 0x13c <__vector_9+0x54>
		edge_detected = TRUE;		//If we have 2 ms of stability, we have successfully detected
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <edge_detected>
	}								
	
	init_timer0();
 13c:	0e 94 3e 00 	call	0x7c	; 0x7c <init_timer0>
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
